app.Use(async (context, next) =>
{
    var logger = context.RequestServices.GetRequiredService<ILogger<Program>>();

    logger.LogInformation("Request Received: {Method} {Path}{QueryString}",
        context.Request.Method, context.Request.Path, context.Request.QueryString);

    // Enable buffering for request body
    context.Request.EnableBuffering();

    if (context.Request.ContentLength > 0 && context.Request.Body.CanSeek)
    {
        context.Request.Body.Position = 0;
        using var reader = new StreamReader(context.Request.Body, leaveOpen: true);
        var body = await reader.ReadToEndAsync();
        logger.LogInformation("Request Body: {Body}", body);
        context.Request.Body.Position = 0; // Rewind for YARP to read
    }

    // Capture original response body stream
    var originalBodyStream = context.Response.Body;
    await using var responseBody = new MemoryStream();
    context.Response.Body = responseBody;

    await next(); // Continue pipeline, including proxy

    // Log response status
    logger.LogInformation("Response Status: {StatusCode}", context.Response.StatusCode);

    // Read and log response body
    responseBody.Seek(0, SeekOrigin.Begin);
    string responseText = await new StreamReader(responseBody).ReadToEndAsync();
    logger.LogInformation("Response Body: {Body}", responseText);

    // Copy response back to original stream
    responseBody.Seek(0, SeekOrigin.Begin);
    await responseBody.CopyToAsync(originalBodyStream);
});
